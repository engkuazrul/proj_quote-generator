{"version":3,"sources":["services/quote.service.js","redux/loader/loader.actions.js","redux/quote/quote.actions.js","components/loader/loader.component.jsx","components/custom-button/custom-button.component.jsx","components/quote-container/quote-container.component.jsx","pages/homepage/homepage.component.jsx","App.js","redux/quote/quote.reducer.js","redux/loader/loader.reducer.js","redux/root-reducer.js","redux/store.js","reportWebVitals.js","index.js"],"names":["QuoteService","a","fetch","proxyUrl","response","json","data","setLoaderStatus","loader","type","payload","setQuoteText","quote","setQuoteAuthor","Loader","className","CustomButton","children","otherProps","isTwitterButton","connect","state","quoteText","quoteAuthor","dispatch","handleClick","then","catch","error","onClick","Homepage","componentDidMount","props","loading","this","React","Component","App","INITIAL_STATE","quoteReducer","action","loaderReducer","combineReducers","middlewares","logger","store","createStore","rootReducer","applyMiddleware","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"yWAceA,EAXG,uCAAG,8BAAAC,EAAA,+EAEMC,MAAMC,qHAFZ,cAEXC,EAFW,gBAGEA,EAASC,OAHX,cAGXC,EAHW,yBAKVA,GALU,uGAAH,qDCHLC,EAAkB,SAAAC,GAAM,MAAK,CACxCC,KAAM,oBACNC,QAASF,ICFEG,EAAe,SAAAC,GAAK,MAAK,CACpCH,KAAM,iBACNC,QAASE,IAGEC,EAAiB,SAAAD,GAAK,MAAK,CACtCH,KAAM,mBACNC,QAASE,I,eCDIE,EAJA,kBACb,qBAAKC,UAAU,Y,uBCKFC,G,MAJM,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAA8BC,GAAjC,EAAaC,gBAAb,sDACnB,gDAAQJ,UAAU,OAAUG,GAA5B,aAAyCD,OC6D5BG,G,MAAAA,aAXS,SAACC,GAAD,MAAY,CAClCC,UAAWD,EAAMT,MAAMU,UACvBC,YAAaF,EAAMT,MAAMW,gBAGA,SAACC,GAAD,MAAe,CACxCjB,gBAAiB,SAACK,GAAD,OAAWY,EAASjB,EAAgBK,KACrDD,aAAc,SAACC,GAAD,OAAWY,EAASb,EAAaC,KAC/CC,eAAgB,SAACD,GAAD,OAAWY,EAASX,EAAeD,QAGtCQ,EApDQ,SAAC,GAAgF,IAA9Eb,EAA6E,EAA7EA,gBAAiBI,EAA4D,EAA5DA,aAAcE,EAA8C,EAA9CA,eAAgBS,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,YAiB5EE,EAAc,WAClBlB,GAAgB,GAhBGP,IAGhB0B,MAAK,SAACd,GACLL,GAAgB,GAChBI,EAAaC,EAAMU,WACnBT,EAAeD,EAAMW,gBAEtBI,OAAM,SAACC,GACNrB,GAAgB,GAChBI,EAAa,8BACbE,EAAe,aAUrB,OACE,sBAAKE,UAAU,kBAAf,UACE,sBAAKA,UAAU,aAAf,UACE,sBAAMA,UAAU,QAAhB,SACE,cAAC,IAAD,MAEDO,KAGH,qBAAKP,UAAU,eAAf,SAA+BQ,IAE/B,qBAAKR,UAAU,mBAAf,SACE,cAAC,EAAD,CAAcc,QAAS,kBAAMJ,KAA7B,gCCrCFK,G,kNAEJC,kBAAoB,WAAO,IAAD,EACgC,EAAKC,MAAtDzB,EADiB,EACjBA,gBAAiBI,EADA,EACAA,aAAcE,EADd,EACcA,eAEnBb,IAGhB0B,MAAK,SAACd,GACLL,GAAgB,GAChBI,EAAaC,EAAMU,WACnBT,EAAeD,EAAMW,gBAEtBI,OAAM,SAACC,GACNrB,GAAgB,GAChBI,EAAa,8BACbE,EAAe,a,4CAIrB,WAAU,IACDoB,EAAWC,KAAKF,MAAhBC,QAEP,OACE,qBAAKlB,UAAU,iBAAf,UACe,IAAZkB,EAAmB,cAAC,EAAD,IAAa,cAAC,EAAD,U,GAzBlBE,IAAMC,YAyCdhB,eAVS,SAACC,GAAD,MAAY,CAClCY,QAASZ,EAAMb,OAAOyB,YAGG,SAACT,GAAD,MAAe,CACxCjB,gBAAiB,SAACK,GAAD,OAAWY,EAASjB,EAAgBK,KACrDD,aAAc,SAACC,GAAD,OAAWY,EAASb,EAAaC,KAC/CC,eAAgB,SAACD,GAAD,OAAWY,EAASX,EAAeD,QAGtCQ,CAA6CU,GC3C7CO,G,MAJH,kBACV,cAAC,EAAD,M,wBCPIC,EAAgB,CACpBhB,UAAW,iDACXC,YAAa,SAsBAgB,EAnBM,WAAoC,IAAnClB,EAAkC,uDAA1BiB,EAAeE,EAAW,uCACtD,OAAQA,EAAO/B,MACb,IAAK,iBACH,OAAO,2BACFY,GADL,IAEEC,UAAWkB,EAAO9B,UAEtB,IAAK,mBACH,OAAO,2BACFW,GADL,IAEEE,YAAaiB,EAAO9B,UAExB,IAAK,cACD,OAAO4B,EACX,QACE,OAAOjB,ICpBPiB,EAAgB,CACpBL,SAAQ,GAeKQ,EAZO,WAAoC,IAAnCpB,EAAkC,uDAA1BiB,EAAeE,EAAW,uCACvD,OAAQA,EAAO/B,MACb,IAAK,oBACH,OAAO,2BACFY,GADL,IAEEY,QAASO,EAAO9B,UAEpB,QACE,OAAOW,ICPEqB,cAAgB,CAC7B9B,MAAO2B,EACP/B,OAAQiC,ICFJE,EAAc,CAACC,KAINC,EAFDC,YAAYC,EAAaC,IAAe,WAAf,EAAmBL,ICK3CM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCIdO,IAASC,OACP,cAAC,IAAD,CAAUb,MAAOA,EAAjB,SACI,cAAC,EAAD,MAEJc,SAASC,eAAe,SAM1BX,M","file":"static/js/main.6ec61597.chunk.js","sourcesContent":["const proxyUrl = 'https://whispering-tor-04671.herokuapp.com/'\nconst apiUrl = 'http://api.forismatic.com/api/1.0/?method=getQuote&lang=en&format=json';\n\nconst QuoteService = async () => {\n  try {\n    const response = await fetch(proxyUrl + apiUrl);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw(error);\n  }\n};\n\nexport default QuoteService;","export const setLoaderStatus = loader => ({\n  type: 'SET_LOADER_STATUS',\n  payload: loader\n});\n","export const setQuoteText = quote => ({\n  type: 'SET_QUOTE_TEXT',\n  payload: quote\n});\n\nexport const setQuoteAuthor = quote => ({\n  type: 'SET_QUOTE_AUTHOR',\n  payload: quote\n});\n\nexport const resetQuote = quote => ({\n  type: 'RESET_QUOTE'\n})","import './loader.styles.scss';\n\nconst Loader = () => (\n  <div className='loader'></div>\n);\n\nexport default Loader;","import React from \"react\";\n\nimport \"./custom-button.styles.scss\";\n\nconst CustomButton = ({ children, isTwitterButton, ...otherProps }) => (\n  <button className='btn' {...otherProps}>{children}</button>\n);\n\nexport default CustomButton;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { FaQuoteLeft } from \"react-icons/fa\";\n\nimport QuoteService from \"../../services/quote.service\";\n\nimport { setLoaderStatus } from \"../../redux/loader/loader.actions\";\nimport { setQuoteText, setQuoteAuthor } from \"../../redux/quote/quote.actions\";\n\nimport CustomButton from \"../custom-button/custom-button.component\";\n\nimport \"./quote-container.styles.scss\";\n\nconst QuoteContainer = ({ setLoaderStatus, setQuoteText, setQuoteAuthor, quoteText, quoteAuthor, }) => {\n  const changeQuote = () => {\n    const fetchQuote = QuoteService();\n\n    fetchQuote\n      .then((quote) => {\n        setLoaderStatus(false);\n        setQuoteText(quote.quoteText);\n        setQuoteAuthor(quote.quoteAuthor);\n      })\n      .catch((error) => {\n        setLoaderStatus(false);\n        setQuoteText('Sorry, please try again :)');\n        setQuoteAuthor('admin');\n      });\n  };\n\n  const handleClick = () => {\n    setLoaderStatus(true);\n\n    changeQuote();\n  };\n\n  return (\n    <div className=\"quote-container\">\n      <div className=\"quote-text\">\n        <span className=\"quote\">\n          <FaQuoteLeft />\n        </span>\n        {quoteText}\n      </div>\n\n      <div className=\"quote-author\">{quoteAuthor}</div>\n\n      <div className=\"button-container\">\n        <CustomButton onClick={() => handleClick()}>New Quote</CustomButton>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  quoteText: state.quote.quoteText,\n  quoteAuthor: state.quote.quoteAuthor,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setLoaderStatus: (quote) => dispatch(setLoaderStatus(quote)),\n  setQuoteText: (quote) => dispatch(setQuoteText(quote)),\n  setQuoteAuthor: (quote) => dispatch(setQuoteAuthor(quote))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuoteContainer);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport QuoteService from \"../../services/quote.service\";\nimport { setLoaderStatus } from \"../../redux/loader/loader.actions\";\nimport { setQuoteText, setQuoteAuthor } from \"../../redux/quote/quote.actions\";\n\nimport Loader from \"../../components/loader/loader.component\";\nimport QuoteContainer from \"../../components/quote-container/quote-container.component\";\n\nimport \"./homepage.styles.scss\";\n\nclass Homepage extends React.Component {\n\n  componentDidMount = () => {\n    const {setLoaderStatus, setQuoteText, setQuoteAuthor} = this.props;\n    \n    const fetchQuote = QuoteService();\n\n    fetchQuote\n      .then((quote) => {\n        setLoaderStatus(false);\n        setQuoteText(quote.quoteText);\n        setQuoteAuthor(quote.quoteAuthor);\n      })\n      .catch((error) => {\n        setLoaderStatus(false);\n        setQuoteText('Sorry, please try again :)');\n        setQuoteAuthor('admin');\n      });\n  }\n\n  render() {\n    const {loading} = this.props;\n\n    return (\n      <div className=\"home-container\">\n        {loading === true ? <Loader /> : <QuoteContainer />}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.loader.loading,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setLoaderStatus: (quote) => dispatch(setLoaderStatus(quote)),\n  setQuoteText: (quote) => dispatch(setQuoteText(quote)),\n  setQuoteAuthor: (quote) => dispatch(setQuoteAuthor(quote))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Homepage);\n","import React from 'react';\n\nimport Homepage from './pages/homepage/homepage.component';\n\nimport './App.css';\n\nconst App = () => (\n  <Homepage />\n);\n\nexport default App;\n","const INITIAL_STATE = {\n  quoteText: 'Welcome, click new quote to generate new quote',\n  quoteAuthor: 'admin'\n}\n\nconst quoteReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case 'SET_QUOTE_TEXT':\n      return {\n        ...state,\n        quoteText: action.payload\n      }\n    case 'SET_QUOTE_AUTHOR':\n      return {\n        ...state,\n        quoteAuthor: action.payload\n      }\n    case 'RESET_QUOTE':\n        return INITIAL_STATE;\n    default:\n      return state;\n  }\n}\n\nexport default quoteReducer;","const INITIAL_STATE = {\n  loading:false\n}\n\nconst loaderReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case 'SET_LOADER_STATUS':\n      return {\n        ...state,\n        loading: action.payload\n      }\n    default:\n      return state;\n  }\n}\n\nexport default loaderReducer;","import { combineReducers } from \"redux\";\n\nimport quoteReducer from \"./quote/quote.reducer\";\nimport loaderReducer from \"./loader/loader.reducer\";\n\nexport default combineReducers({\n  quote: quoteReducer,\n  loader: loaderReducer\n});","import { createStore, applyMiddleware } from \"redux\";\nimport logger from \"redux-logger\";\n\nimport rootReducer from \"./root-reducer\";\n\nconst middlewares = [logger];\n\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nexport default store;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\n\nimport store from './redux/store';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n      <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}